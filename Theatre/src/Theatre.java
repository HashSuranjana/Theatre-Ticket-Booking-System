import java.util.* ;import java.io.* ;public class Theatre {    static int[] Row_1 = new int[12], Row_2 = new int[16], Row_3 = new int[20];  //Arrays that store rows information    static ArrayList<Ticket> Ticketlist = new ArrayList<Ticket>();  //Arraylist that store ticket information    static ArrayList<Ticket> sorted_ticketlist = new ArrayList<Ticket>() ;    public static void main(String args[]) {        while (true)            //Printing the menu items            System.out.println("\n\t\tWelcome To The New Theatre.");            System.out.println("-".repeat(50) + "\n" +                    "Please select an option:\n" +                    "\t1. Buy a ticket\n" +                    "\t2. Print seating area\n" +                    "\t3. Cancel ticket\n" +                    "\t4. List available seats\n" +                    "\t5. Save to file\n" +                    "\t6. Load from file\n" +                    "\t7. Print ticket information and total price\n" +                    "\t8. Sort Ticketlist by price\n" +                    "\t0. Quit\n" +                    "-".repeat(50));            // Get the option from the user            int option = Input("Enter Option : ", "-".repeat(50) + "\nPlease enter 1-8 Number\n" + "-".repeat(50), 8, 0);            switch (option) {                case 1 ->  // if user wants to buy tickets                        Buy_ticket();                case 2 -> {  // if user wants to look theatre area                    System.out.println(" ".repeat(12) + "*".repeat(17));                    System.out.println(" ".repeat(15) + "*  STAGE  *");                    System.out.println(" ".repeat(12) + "*".repeat(17));                    Print_seating_area(Row_1);                    Print_seating_area(Row_2);                    Print_seating_area(Row_3);                }                case 3 ->   // if user wants to cancel the booked ticket                        cancel_ticket();                case 4 -> {  // if user wants to check what are the free seats row by row                    show_available("Seats available in Row 1 :", Row_1); //Calling method                    show_available("Seats available in Row 2 :", Row_2);                    show_available("Seats available in Row 3 :", Row_3);                }                case 5 ->  // if user wants to save seat bookings                        save();                case 6 ->  // if user wants to load previous seat bookings                        load();                case 7 ->  // if user wants to show the tickets information                        show_ticket_info();                case 8 ->  // if user wants to sort the tickets by price                        sort_tickets();            }            if (option == 0) {  //To quit the program                System.out.println("-".repeat(50) +"\n......Thanks for Using......\n"+"-".repeat(50) );                break;            }        }    static int Input(String message, String error, int max, int min) {        Scanner input = new Scanner(System.in);  //Creating a object of Scanner class        while (true) {            // Exception Handling            try {                System.out.print(message);                int entry = input.nextInt(); //Get input from the user                if (entry > max) {  // Check whether marks are lower than the maximum number                    System.out.println(error);                    continue;                }                if (entry < min) {  // Check whether marks are higher than the least number                    System.out.println(error);                    continue;                }                return entry ;  // Return the entered value            } catch (InputMismatchException e1) {  //if user enters a wrong type(integer is the valid type) catch the error                System.out.println("-".repeat(50) +"\nPlease enter an integer.\n"+"-".repeat(50) );                input.next(); // To break the infinite loop            }        }    }    static void Buy_ticket() {        Scanner input = new Scanner(System.in);  // Creating a object of Scanner class        System.out.print("Enter your Name : ");        String name = input.next();   // Get the name from the user        System.out.print("Enter your Sur_Name : ");        String sur_name = input.next();  // Get the surname from the user        System.out.print("Enter your Email : ");        String email = input.next();  // Get the email from the user        while (true) {            int row_number = Input("Enter the row number(1-3) : ", "-".repeat(50) + "\nPlease enter 1-3 Number\n" + "-".repeat(50), 3, 1);            switch (row_number) {                case 1:                    while (true) {                        int price = 10; // Raw 1 price                        int seat_number_1 = Input("Enter seat number (1-12) : ", "-".repeat(50) + "\nPlease enter 1-12 Number\n" + "-".repeat(50), 12, 1);                        if (Row_1[seat_number_1 - 1] == 0) {                            Person person = new Person(name, sur_name, email); //Create an object of Person class                            Ticket ticket = new Ticket(row_number, seat_number_1, price, person); //Create an object of TIcket class                            Row_1[seat_number_1 - 1] = 1; //Set the Raw index value to 1                            Ticketlist.add(ticket); //Add details to the Ticketlist                            break;                        } else {                            System.out.println("-".repeat(50) +"\nSeat is already booked\n"+"-".repeat(50) );                        }                    }                    break ;                case 2:                    int price = 20 ; //Raw 2 Price                    while (true) {                        int seat_number_2 = Input("Enter seat number (1-16) : ", "-".repeat(50) + "\nPlease enter 1-16 Number\n" + "-".repeat(50), 16, 1);                        if (Row_2[seat_number_2 - 1] == 0) { //Check Whether Raw's index value is 0                            Person person = new Person(name,sur_name,email) ;                            Ticket ticket = new Ticket(row_number,seat_number_2,price,person) ;                            Row_2[seat_number_2 - 1] = 1;                            Ticketlist.add(ticket) ;  //Add detaiils to TicketList                            break ;                        } else {                            System.out.println("-".repeat(50) +"\nSeat is already booked\n"+"-".repeat(50) );                        }                    }                    break;                case 3:                    price = 30 ; //Raw 3 Price                    while (true) {                        int seat_number_3 = Input("Enter seat number (1-20) : ", "-".repeat(50) + "\nPlease enter 1-20 Number\n" + "-".repeat(50), 20, 1);                        if (Row_3[seat_number_3 - 1] == 0) { //Check Raw 3 index number(seat-1=index) is 0                            Person person = new Person(name,sur_name,email) ;                            Ticket ticket = new Ticket(row_number,seat_number_3,price,person) ;                            Row_3[seat_number_3 - 1] = 1; //set value to 1                            Ticketlist.add(ticket) ;                            break;                        } else {                            System.out.println("-".repeat(50) +"\nSeat is already booked\n"+"-".repeat(50) );                        }                    }                    break;            }            break;        }    }    static void Print_seating_area(int[] row) {  // Print the theatre area.        if(row.length/2 == 6) { //To print Row_1 indentations            System.out.print("        ");        }else if (row.length/2 == 8) {  //To print Row_2 indentations            System.out.print("    ");        }        for (int elements =0 ; elements<row.length ; elements++) {            if(elements == (row.length/2)) {                System.out.print( "  " );            }            if (row[elements] == 0) {  //if the row's element index value is 0 print "O" in the seating area                System.out.print("O" +" ");            } else if (row[elements] == 1) { //if the row's element index value is 1 print "X" in the seating area                System.out.print("X"+ " ");            }        }        System.out.println();  //Print one new line when the iteration is finished    }    static void cancel_ticket() {        int row =Input("Enter Row number(1-3) :","-".repeat(50) +"\nPlease enter 1-3 number\n"+"-".repeat(50) ,3,1) ;//Get the row numebr        switch (row) {            case 1 :                int seat_1 =Input("Enter Seat number :","Please enter 1-12 number.",12,1) ;;//Get the seat number                if(Row_1[seat_1-1] ==1){ //Check the index is 1                    Row_1[seat_1-1] =0 ; //set Raw 1 index to 0                    for (Ticket t1 :Ticketlist){  //Run through the Ticketlist                        if(row ==t1.getRow() && seat_1==t1.getSeat()){ //check whether row number and seat number is correct                            Ticketlist.remove(t1); // Remove the ticketlist Item                            break;                        }                    }                    System.out.print("-".repeat(50) +"\nTicket cancellation Successful\n"+"-".repeat(50) );                    break;                }else{                    System.out.println("-".repeat(50) +"\nSeat haven't booked yet.Please Check again.\n"+"-".repeat(50) );                    break;                }            case 2 :                int seat_2 =Input("Enter Seat number :","Please enter 1-16 number.",16,1) ;;                if(Row_2[seat_2-1] ==1){  //Check the index is 1                    Row_2[seat_2-1] =0 ;  //set Raw 1 index to 0                    for (Ticket t1 :Ticketlist){                        if(row ==t1.getRow() && seat_2==t1.getSeat()){ //check whether row number and seat number is correct                            Ticketlist.remove(t1); // Remove the ticketlist Item                            break;                        }                    }                    System.out.print("-".repeat(50) +"\nTicket cancellation Successful\n"+"-".repeat(50) );                    break;                }else{                    System.out.println("-".repeat(50) +"\nSeat haven't booked yet.Please Check again.\n"+"-".repeat(50) );                    break;                }            case 3 :                int seat_3 =Input("Enter Seat number :","Please enter 1-20 number.",20,1) ;;//Get the seat number                if(Row_3[seat_3-1] ==1){   //Check the index is 1                    Row_3[seat_3-1] =0 ;  //set Raw 1 index to 0                    for (Ticket t1 :Ticketlist){                        if(row ==t1.getRow() && seat_3==t1.getSeat()){ //check whether row number and seat number is correct                            Ticketlist.remove(t1); // Remove the ticketlist Item                            break;                        }                    }                    System.out.print("-".repeat(50) +"\nTicket cancellation Successful\n"+"-".repeat(50) );                    break;                }else{                    System.out.println("-".repeat(50) +"\nSeat haven't booked yet.Please Check again.\n"+"-".repeat(50) );                    break;                }        }    }    static void show_available(String message, int[] row) { /*message parameter is to give what is to be printed and                                                              row parameter is to give the name of the row */        System.out.print(message + " ");        for (int count = 0; count < row.length; count++) {            if (row[count] == 0) { //Check the value of the index equals to 0                System.out.print((count + 1) + " , "); /* print the (count+1) to get actual seat number because index number is                                                        not the seat number(index = seat -1) */            }        }        System.out.println();    }    static void save() {  //Save all the seat numbers in all rows to a file        try {            FileWriter file_write = new FileWriter("data.txt"); //Creating a text file(auto creation)            for (int i : Row_1) { //To add Raw_1 seat details                if (i == 0) {                    file_write.write("0" + System.lineSeparator());                } else {                    file_write.write("1" + System.lineSeparator());                }            }            for (int i : Row_2) {  //To add Raw_2 seat details                if (i == 0) {                    file_write.write("0" + System.lineSeparator());                } else {                    file_write.write("1" + System.lineSeparator());                }            }            for (int i : Row_3) {  //To add Raw_3 seat details                if (i == 0) {                    file_write.write("0" + System.lineSeparator());                } else {                    file_write.write("1" + System.lineSeparator());                }            }            file_write.close();  //Close the file            System.out.println("-".repeat(50) +"\nSave Completed !\n"+"-".repeat(50) );  // Gives the user a message that information saving is successful.        } catch (IOException e) {            System.out.println("-".repeat(50) +"\nAn error occurred while saving data.\n"+"-".repeat(50) ); //if error occurred throws exception instead of breaking the program        }    }    static void load() {        try {            File file = new File("data.txt");            Scanner file_reader = new Scanner(file); //Create a object file_reader in Scanner class            for (int i = 0; i < Row_1.length; i++) {  //iterate through the Raw_1                Row_1[i] = Integer.parseInt(file_reader.next());  //convert String into integer to store the arrays            }            for (int i = 0; i < Row_2.length; i++) {  //iterate through the Raw_2                Row_2[i] = Integer.parseInt(file_reader.next()); //convert String into integer to store the arrays            }            for (int i = 0; i < Row_3.length; i++) {  //iterate through the Raw_3                Row_3[i] = Integer.parseInt(file_reader.next()); //convert String into integer to store the arrays            }            file_reader.close(); //close the file            System.out.println("-".repeat(50) +"\nLoad Completed !\n"+"-".repeat(50) ); // gives user a message that loading is completed        } catch (Exception e) {            System.out.println("-".repeat(50) +"\nError occured while reading the file.\n"+"-".repeat(50) ) ; //if error occurred throws exception instead of breaking the program        }    }    static void show_ticket_info() {        int sum = 0 ; // To store the total price of tickets.        for (Ticket ticket : Ticketlist) {            ticket.Print();  //Get the data in Ticketlist's i index            sum += ticket.getPrice();        }        System.out.println("Total amount of tickets : " + sum + "$"); // To display the ticket's information.    }    static void sort_tickets(){ // method for sorting the Ticketlist.                sorted_ticketlist = (ArrayList)Ticketlist.clone() ;  //Copying data from Ticketlist to sorted_ticketlist        int final_index =sorted_ticketlist.size()-1 ;        Ticket temp ;        boolean exchanged = true ;        while(exchanged) {            exchanged =false ;            for (int i=0 ; i<final_index ; i++) {                int price_1 = sorted_ticketlist.get(i).getPrice();                int price_2 = sorted_ticketlist.get(i+1).getPrice();                if(price_1>price_2) {                    temp =sorted_ticketlist.get(i) ;                    sorted_ticketlist.set(i,sorted_ticketlist.get(i+1)) ;                    sorted_ticketlist.set(i+1,temp) ;                    exchanged =true ;                }            }            final_index -- ;        }        for (Ticket t : sorted_ticketlist) {            t.Print();        }    }}